kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Release.Name }}-config"
  labels:
    {{- include "fluentd-daemonset.helm-labels" (dict "component" "fluentd-daemonset" "root" .) | nindent 4 }}
data:
  fluent.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      <record>
        event_time ${time.strftime('%Y-%m-%dT%H:%M:%S.%NZ')}
      </record>
    </filter>

    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url "#{ENV['FLUENT_FILTER_KUBERNETES_URL'] || 'https://' + ENV.fetch('KUBERNETES_SERVICE_HOST') + ':' + ENV.fetch('KUBERNETES_SERVICE_PORT') + '/api'}"
      verify_ssl "#{ENV['KUBERNETES_VERIFY_SSL'] || true}"
      ca_file "#{ENV['KUBERNETES_CA_FILE']}"
    </filter>

    <match kubernetes.var.log.containers.**_kube-system_**>
      @type null
    </match>

    <match kubernetes.var.log.containers.**_kube-public_**>
      @type null
    </match>

    <match kubernetes.var.log.containers.**_kube-node-lease_**>
      @type null
    </match>

    <match kubernetes.var.log.containers.**_logstash_**>
      @type null
    </match>

    <match kubernetes.var.log.containers.**_istio-system_**>
      @type null
    </match>

    <match kubernetes.var.log.containers.**_default_**>
      @type null
    </match>

    <match kubernetes.var.log.containers.**_logging_**>
      @type null
    </match>

    <match **>
      {{- if eq .Values.output.target "azureblob"}}
      @type azure-storage-append-blob

      {{- if eq .Values.output.azureblob.authorization "sastoken" }}
      # Auth based on secrets from HELM configuration
      # Secrets are attached as secretKeyRefs from "{{ .Release.Name }}-fluentd-secret" secret
      azure_storage_account "#{ENV['AZURE_STORAGE_ACCOUNT']}"
      azure_storage_sas_token "#{ENV['AZURE_STORAGE_SAS_TOKEN']}"
      {{- end }}

      # Storing
      azure_container {{ required "Azure Blob container name is required" .Values.output.azureblob.bucket }}
      azure_object_key_format "{{ .Values.output.objectKeyFormat }}.txt"
      auto_create_container "true"
      {{- end }}
      {{- if eq .Values.output.target "s3"}}
      @type s3
      {{- if eq .Values.output.s3.authorization "iam" }}
      <instance_profile_credentials>
      </instance_profile_credentials>
      {{- end }}
      s3_bucket {{ required "S3 bucket values is required" .Values.output.s3.bucket }}
      s3_region {{ required "S3 region values is required" .Values.output.s3.region }}
      s3_object_key_format {{ .Values.output.objectKeyFormat }}

      store_as {{ .Values.output.storeAs }}
      utc
      {{- end }}
      {{- if eq .Values.output.target "gcs" }}
      @type gcs
      auto_create_bucket false
      bucket {{ required "GCS bucket value is required" .Values.output.gcs.bucket }}
      object_key_format {{ .Values.output.objectKeyFormat | quote }}
      store_as {{ .Values.output.storeAs }}
      time_slice_wait {{ .Values.output.timeSliceWait }}
      utc
      {{- end }}

      path {{ .Values.output.path | quote }}
      time_slice_format {{ .Values.output.timeSliceFormat }}

      # Buffering
      <buffer hostname,tag,time>
        @type file
        path {{ .Values.output.buffering.path }}/kubernetes
        timekey {{ .Values.output.buffering.timekey }}
        timekey_wait {{ .Values.output.buffering.timekeyWait }}
        timekey_use_utc true
      </buffer>

      # Formatting
      <format>
        @type {{ .Values.output.format }}
      </format>
    </match>
